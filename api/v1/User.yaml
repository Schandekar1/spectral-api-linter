openapi: 3.0.0
info:
  version: 'V2'
  title: 'user-management'
  description: 'Micro Service for User Management'
  contact:
    email: "userhub@nice.com"
  x-cxone-rulesVersion: "1"
  x-cxone-lastChanges:
    - Aarti Jain April 14, 2021 - Created the API Document
tags:
  - name: Users
servers:
  - url: https://api-na1.dev.niceincontact.com/user-management/v2
    description: Dev Environment
    variables: {}
  - url: https://api-na1.test.niceincontact.com/user-management/v2
    description: Test Environment
    variables: {}
  - url: https://api-nvir.test.niceincontact.com/user-management/v2
    description: North Virginia Test Environment
    variables: {}
  - url: https://api-na1.staging.niceincontact.com/user-management/v2
    description: Staging Environment
    variables: {}
  - url: https://api-na1.niceincontact.com/user-management/v2
    description: Production Oregon Environment (uses live data)
    variables: {}
  - url: https://api-au1.niceincontact.com/user-management/v2
    description: Production Australia Environment (uses live data)
    variables: {}
  - url: https://api-eu1.niceincontact.com/user-management/v2
    description: Production Frankfurt Environment (uses live data)
    variables: {}
  - url: https://api-na2.niceincontact.com/user-management/v2
    description: Production FedRamp Environment (uses live data)
    variables: {}
paths:
  '/users/identities':
    get:
      x-cxone-api-key:  '45caaf9b-1da9-4116-81ea-176836ec36b9'
      x-cxone-audience: 'external-public'
      x-cxone-productCatalogPermissions:
        - user: view
          user:my: view
      summary: API search user identities by filter
      description: This API is used to search paginated user identities by filter, default and mandatory filter is user should be active
      operationId: getUserIdentityList
      tags:
        - Users
      parameters:
        - name: filter
          in: query
          required: false
          schema:
            type: string
          description: Supported - eq, not, like and Supported Filter Fields - id, fullName, status concatenated by 'AND'
        - name: skip
          in: query
          required: false
          schema:
            type: number
          description: default is 0
        - name: top
          in: query
          required: false
          schema:
            type: number
          description: default is 50
        - name: fields
          in: query
          required: false
          schema:
            type: string
          description: comma separate fields for projection Supported and default - id, fullName, status
        - name: orderBy
          in: query
          required: false
          schema:
            type: string
          description: include orderBy asc or desc
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserIdentityListResponseV2"
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - invalid request data
        '500':
          description: Internal Error
        '502':
          description: Bad Gateway
  '/users/search':
    post:
      x-cxone-api-key:  '845c46d7-aacf-4ad2-b577-270b95399d77'
      x-cxone-audience: 'external-public'
      x-cxone-productCatalogPermissions:
        - user: view
          user:my: view
      summary: Get user details as per given filters and fields
      description: 'This API takes input cbcas a search criteria with OR support which can accept any combination of given attributes as a filter
                     supported with existing version and can return only expected fields as per request'
      operationId: getUsersByCriteria
      tags:
        - Users
      requestBody:
        description: Request payload for user search
        required: false
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/SearchRequest"
            example:
              filter:
                roleId:
                  - 12ea996c-98df-2a07-9ebd-c87b76b88f01
                  - aaa0a5ce-8a23-2c8a-9a29-28dde50deab6
                status:
                  - UNREGISTERED
                  - ACTIVE
                  - PENDING
                  - BLOCKED
                  - DELETED
                extendedAttributes:
                  canBeRecorded: true
                fullName:
                  - John
                userName:
                  - John
                displayName:
                  - John
                emailAddress:
                  - John
              operations:
                roleId: LIKE
                fullName: LIKE
                userName: LIKE
                displayName: LIKE
                emailAddress: LIKE
                fullName, userName, displayName, emailAddress: OR
              skip: 2
              top: 20
              fields:
                - userId
                - userName
                - firstName
                - lastName
                - middleName
                - displayName
                - emailAddress
                - mobileNumber
                - mobileNumber2
                - rank
                - country
                - timeZone
                - impersonated
                - assignedGroup
                - roleId
                - status
                - roleName
                - billable
                - teamId
                - externalIdentity
                - viewId
                - primaryRole
                - type
                - extendedAttributes
              orderBy:
                userName: ASC
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/UserSearchResponse"
        '400':
          description: Validation or internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                Invalid Filter Column:
                  value:
                    code:  search-utility-1
                    details: "Invalid Field present in the list java.lang.NoSuchFieldException: roleIds"
                    hostName: e3adfde217fb
                    entityType: null
                    errors: {}
                Invalid UUID Format:
                  value:
                    code:  search-utility-10
                    details: "Invalid UUID format"
                    hostName: e3adfde217fb
                    entityType: null
                    errors: {}
                Invalid Operation(Like):
                  value:
                    code:  search-utility-1
                    details: "Like operation supports only 1 value, but passed 2"
                    hostName: e3adfde217fb
                    entityType: null
                    errors: {}
                Invalid Operation(Between):
                  value:
                    code:  search-utility-1
                    details: "Between operation needs 2 values,but passed  1"
                    hostName: e3adfde217fb
                    entityType: null
                    errors: {}
                Invalid Operation(Equal):
                  value:
                    code:  search-utility-1
                    details: "EQ operation supports only 1 value, but passed 2"
                    hostName: e3adfde217fb
                    entityType: null
                    errors: {}
                Invalid Order By :
                  value:
                    code:  search-utility-6
                    details: "OrderBy supports only single column but received 2"
                    hostName: e3adfde217fb
                    entityType: null
                    errors: {}
                Invalid OR Operation :
                  value:
                    code: platform_user_manager_service_66
                    details: "Column test must be present in filter criteria"
                    hostName: e3adfde217fb
                    entityType: null
                    errors: { }
                Invalid OR Operation 2:
                  value:
                    code: platform_user_manager_service_66
                    details: "Column test must be whitelisted for OR operation"
                    hostName: e3adfde217fb
                    entityType: null
                    errors: { }
                Empty Filter List :
                  value:
                    code:  search-utility-3
                    details: "List cannot be empty for key roleId"
                    hostName: e3adfde217fb
                    entityType: null
                    errors: {}
                Invalid Metric Column :
                  value:
                    code:  search-utility-2
                    details: "Column mapping for InvalidColumn is not present in Configuration file"
                    hostName: e3adfde217fb
                    entityType: null
                    errors: {}
        '401':
          description: Unauthorized. Invalid credentials.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedErrorResponse'
              example:
                timestamp: '2020-04-09T06:00:15.807+0000'
                status: 401
                error: Unauthorized
                message: No message available
                path: /user-management/v1/users/search
        '403':
          description: Forbidden. Access is denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                code: platform_user_manager_service_114
                details: Access is denied. Kindly check user permissions.
                hostName: f4c67f3b8b7a
                entityType: null
                errors: {}
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                code: platform_user_manager_service_95
                details: Invalid user details.
                hostName: 81a05c09f800
                entityType: null
                errors: {}
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                code: platform_user_manager_service_1
                details: Internal Server Error
                hostName: f4c67f3b8b7a
                entityType: null
                errors: {}
        '502':
          description: Bad Gateway
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                code: Bad Gateway
                details: Bad Gateway. Invalid response received by gateway.
                hostName: f4c67f3b8b7a
                entityType: null
                errors: {}
        '503':
          description: Throttling
          headers:
            Retry-After:
              description: The time(in milliseconds) after which retry will happen.
              schema:
                type: integer
                example: 500
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                code: platform-user-manager-service-999
                details: ServiceThrottledCode=platform-user-manager-service-911 ErrorCode=platform-user-manager-service-999
                hostName: 81a05c09f800
                entityType: null
                errors: {}
        '504':
          description: Gateway Timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                code: Gateway Timeout
                details: Gateway Timeout.Request got timed out due to slow network communication.Contact administrator.
                hostName: f4c67f3b8b7a
                entityType: null
                errors: {}
        '509':
          description: Bandwidth Limit Exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                code: Bandwidth Limit Exceeded
                details: The set bandwdith limit has been exceeded. Try after bandwidth limit has been reset.
                hostName: f4c67f3b8b7a
                entityType: null
                errors: {}
        '529':
          description: Site is overloaded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                code: Site is overloaded
                details: Currently service is overloaded with multiple requests and cannot process it.Try after sometime.
                hostName: f4c67f3b8b7a
                entityType: null
                errors: {}
  '/users/{userId}':
    get:
      x-cxone-api-key:  '45caaf9b-1da9-4116-81ea-176836ec36c9'
      x-cxone-audience: 'external-public'
      x-cxone-productCatalogPermissions:
        - user: view
          user:my: view
      summary: API to get user details by user Id
      description: This API is used to get user details by user Id
      operationId: getUserByIdV2
      tags:
        - Users
      parameters:
        - name: userId
          in: query
          required: false
          schema:
            type: string
          description: Supported - eq, not, like and Supported Filter Fields - id, fullName, status concatenated by 'AND'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponseV2"
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - invalid request data
        '500':
          description: Internal Error
        '502':
          description: Bad Gateway
  /teams:
    post:
      x-cxone-api-key: '64230531-019a-45f1-97c9-6a6599c6efb8'
      x-cxone-audience: 'external-public'
      x-cxone-productCatalogPermissions:
        - team: view
      summary: 'Creates a new team'
      description: 'This creates a new team and returns created team with teamId'
      operationId: create
      tags:
        - Teams
      requestBody:
        description: Request payload for creating team
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TeamResponseV2'
            example:
              {
                "id": '170d54d4-43cd-11e8-80b2-025041000001',
                "name": "Test Team",
                "description": "Test Description",
                "status": "ACTIVE",
                "leadUserId": "11e8282f-6018-2850-9a21-c85b76b88558",
                "isDefault": "false",
                "createdBy": '11e8282f-6018-2850-9a21-c85b76b88558',
                "applicationAttributes": 'null',
                "customAttributes": 'null',
                "lastModified": 'null',
                "userCount": 'null'
              }
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TeamResponseV2"
              example:
                "TeamRequest": {
                  "id": "170d54d4-43cd-11e8-80b2-025041000001",
                  "name": "Test Team",
                  "description": "Test Description",
                  "status": "ACTIVE",
                  "leadUserId": "11e8282f-6018-2850-9a21-c85b76b88558",
                  "isDefault": false,
                  "createdBy": '11e8282f-6018-2850-9a21-c85b76b88558',
                  "applicationAttributes": 'null',
                  "teamCustomAttributes": 'null',
                  "lastModified": 'null',
                  "userCount": 'null'
                  }
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                code: 'Bad Request'
                details: 'Invalid field name present in filter: names'
                hostName: e3adfde217fb
                entityType: null
                errors: {}
        401:
          description: Unauthorized. Invalid credentials.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedErrorResponse'
              example:
                timestamp: '2020-04-09T06:00:15.807+0000'
                status: '401'
                error: Unauthorized
                message: No message available
                path: /user-management/v2/teams
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                code: '500'
                details: Internal Server Error
                hostName: f4c67f3b8b7a
                entityType: null
                errors: {}
    put:
      x-cxone-api-key: '64230531-019a-45f1-97c9-6a6599c6efc8'
      x-cxone-audience: 'external-public'
      x-cxone-productCatalogPermissions:
        - team: view
      summary: Update existing team
      description: This updates the existing team and returns updated team
      operationId: update
      tags:
        - Teams
      requestBody:
        description: Request payload for updating team
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TeamResponseV2'
            example:
              {
                "id": '170d54d4-43cd-11e8-80b2-025041000001',
                "name": "Test Team",
                "description": "Test Description",
                "status": "INACTIVE",
                "leadUserId": "11e8282f-6018-2850-9a21-c85b76b88558",
                "isDefault": "false",
                "createdBy": '11e8282f-6018-2850-9a21-c85b76b88558',
                "applicationAttributes": 'null',
                "customAttributes": 'null',
                "lastModified": 'null',
                "userCount": 'null'
              }
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TeamResponseV2"
              example:
                "TeamRequest": {
                  "id": "170d54d4-43cd-11e8-80b2-025041000001",
                  "name": "Test Team",
                  "description": "Test Description",
                  "status": "INACTIVE",
                  "leadUserId": "11e8282f-6018-2850-9a21-c85b76b88558",
                  "isDefault": false,
                  "createdBy": '11e8282f-6018-2850-9a21-c85b76b88558',
                  "applicationAttributes": 'null',
                  "teamCustomAttributes": 'null',
                  "lastModified": 'null',
                  "userCount": 'null'
                }
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                code: 'Bad Request'
                details: 'Invalid field name present in filter: names'
                hostName: e3adfde217fb
                entityType: null
                errors: {}
        401:
          description: Unauthorized. Invalid credentials.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedErrorResponse'
              example:
                timestamp: '2020-04-09T06:00:15.807+0000'
                status: '401'
                error: Unauthorized
                message: No message available
                path: /user-management/v2/teams
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                code: '500'
                details: Internal Server Error
                hostName: f4c67f3b8b7a
                entityType: null
                errors: {}
  /teams/search:
    post:
      x-cxone-api-key: '64230531-019a-45f1-97c9-6a6599c6efd8'
      x-cxone-audience: 'external-public'
      x-cxone-productCatalogPermissions:
        - team: view
      summary: Get teams for given search criteria
      description: This API takes input as a search criteria which can accept any combination of given attributes as a filter and can return only expected fields
      operationId: getByCriteria
      tags:
        - Teams
      requestBody:
        description: Request payload for team search
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchCritera'
            example:
              {
                "filter": {
                  "name": ["Team1"],
                  "description": ["description"],
                  "status": ["ACTIVE", "INACTIVE"],
                  "leadUserId": ["02d69309-f0ce-45c9-a829-6da32a025ba0"],
                  "isDefault": ["true", "false"]
                },
                "operations": {
                  "name": "EQ",
                  "status": "IN"
                },
                "Page": {
                  "pageSize": 2147483647,
                  "pageNo": 0,
                  "totalRecords":0
                },
                "Metrices" : {
                  "columns": []
                },
                "orderBy": {
                  "name":"ASC"
                }
              }
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetTeamsResponseV2"
              example:
                {
                  "teams": [
                    "TeamRequest": {
                      "id": "170d54d4-43cd-11e8-80b2-025041000001",
                      "name": "Test Team",
                      "description": "Test Description",
                      "status": "ACTIVE",
                      "leadUserId": "11e8282f-6018-2850-9a21-c85b76b88558",
                      "isDefault": false,
                      "createdBy": '11e8282f-6018-2850-9a21-c85b76b88558',
                      "applicationAttributes": 'null',
                      "teamCustomAttributes": 'null',
                      "lastModified": 'null',
                      "userCount": 'null'
                   }
                 ],
                  "Page": {
                    "pageSize": 2147483647,
                    "pageNo": 0,
                    "totalRecords": 0
                  }
                }
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                code: 'Bad Request'
                details: 'Invalid field name present in filter: names'
                hostName: e3adfde217fb
                entityType: null
                errors: {}
        401:
          description: Unauthorized. Invalid credentials.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedErrorResponse'
              example:
                timestamp: '2020-04-09T06:00:15.807+0000'
                status: '401'
                error: Unauthorized
                message: No message available
                path: /user-management/v2/teams/search
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                code: '500'
                details: Internal Server Error
                hostName: f4c67f3b8b7a
                entityType: null
                errors: {}
  /teams/{teamId}:
    get:
      x-cxone-api-key: '27e768f0-1294-4afc-90e9-4b305a966c07'
      x-cxone-audience: 'external-public'
      x-cxone-productCatalogPermissions:
        - team: view
      summary: Get team by teamId
      description: This API will return all details for given teamId
      operationId: getById
      tags:
        - Teams
      parameters:
        - name: teamId
          in: path
          description: Id of team
          required: true
          schema:
            type: string
            example: 170d54d4-43cd-11e8-80b2-025041000001
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TeamResponseV2"
              example:
                {
                  "TeamRequest": {
                    "id": "170d54d4-43cd-11e8-80b2-025041000001",
                    "name": "Test Team",
                    "description": "Test Description",
                    "status": "ACTIVE",
                    "leadUserId": '11e8282f-6018-2850-9a21-c85b76b88558',
                    "isDefault": 'false',
                    "createdBy": '11e8282f-6018-2850-9a21-c85b76b88558',
                    "applicationAttributes": 'null',
                    "customAttributes": 'null',
                    "lastModified": 'null',
                    "userCount": 'null'
                  }
                }
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - invalid request data
        '500':
          description: Internal Error
        '502':
          description: Bad Gateway
        '504':
          description: Gateway Timeout
components:
  # Reusable schemas (data models) both input and output
  schemas: # allows the definition of input and output data types. These types can be objects, but also primitives and arrays
    UserIdentityListResponseV2:
      type: object
      properties:
        totalRecords:
          type: integer
          format: int32
          example: 1
        users:
          type: array
          items:
            $ref: "#/components/schemas/UserIdentityV2"
        links:
          $ref: '#/components/schemas/Links'
    UserIdentityV2:
      type: object
      properties:
        id:
          type: string
          example: "11e9239f-f6eb-ede0-8601-0242ac110002"
        displayName:
          type: string
          example: "Aarti Jain, aarti.jain@do31.com"
        status:
          type: string
          enum:
          - UNREGISTERED
          - PENDING
          - ACTIVE
          - BLOCKED
          - DELETED
    Links:
      type: object
      properties:
        self:
          type: string
        next:
          type: string
        previous:
          type: string
    ErrorResponse:
      type: object
      properties:
        code:
          type: string
        details:
          type: string
        hostname:
          type: string
        entityType:
          type: string
        errors:
          type: object
    UnauthorizedErrorResponse:
      type: object
      properties:
        timestamp:
          type: string
        status:
          type: number
        error:
          type: string
        message:
          type: string
        path:
          type: string
    UserView:
      type: object
      properties:
        id:
          type: string
        objectType:
          type: string
    UserSearchResponse:
      type: object
      properties:
        totalRecords:
          type: integer
          format: int32
          example: 1
        skip:
          type: integer
          format: int32
          example: 2
        top:
          type: integer
          format: int32
          example: 20
        users:
          type: array
          items:
            "$ref": "#/components/schemas/SearchedUser"
    SearchedUser:
      type: object
      properties:
        id:
          type: string
          example: "11e9239f-f6eb-ede0-8601-0242ac110002"
        userName:
          type: string
          example: "testuser6454@do31.com"
        firstName:
          type: string
          example: "Test"
        lastName:
          type: string
          example: "User"
        middleName:
          type: string
          example: "Mid"
        displayName:
          type: string
          example: "Test User"
        emailAddress:
          type: string
          example: "test.user@nice.com"
        customAttributes:
          type: object
          additionalProperties:
            "$ref": "#/components/schemas/CustomAttribute"
        mobileNumber:
          type: string
        mobileNumber2:
          type: string
        assignedGroup:
          type: string
          example: "11e91ef8-bfc2-37d0-a74e-0242ac110002"
        rank:
          type: integer
          format: int32
          example: 1
        country:
          type: string
        timeZone:
          type: string
          example: "US/Hawaii"
        role:
          type: string
          example: "Employee"
        roleUUID:
          type: string
          example: "12ea996c-98df-2a07-9ebd-c87b76b88f01"
        type:
          type: string
          example: "Type 1"
        hireDate:
          type: string
          format: date-time
          example: "2019-01-29T00:00:00.000+0000"
        status:
          type: string
          enum:
            - UNREGISTERED
            - PENDING
            - ACTIVE
            - BLOCKED
            - DELETED
        invitationExpired:
          type: boolean
          example: true
        acdUserMappings:
          type: array
          items:
            "$ref": "#/components/schemas/AcdUserMapping"
        acdInfos:
          type: array
          items:
            "$ref": "#/components/schemas/AcdInfo"
        groupIds:
          type: array
          items:
            type: string
        deletedDate:
          type: string
          format: date-time
        impersonated:
          type: boolean
          example: false
        billable:
          type: boolean
        modifiable:
          type: boolean
        passwordPolicyUpdated:
          type: boolean
          example: false
        teamId:
          type: string
          example: "00070b01-96e5-490a-92bf-8ac65c313dcf"
        externalIdentity:
          type: string
        creationDate:
          type: string
          format: date-time
        emailToBeVerified:
          type: string
        secondaryRoleIds:
          type: array
          items:
            type: string
        fullName:
          type: string
          example: "Test User"
        views:
          type: array
          items:
            "$ref": "#/components/schemas/UserView"
    SearchRequest:
      type: object
      properties:
        filter:
          type: object
          uniqueItems : true
          additionalProperties:
            type: object
          description: >
            Filter: Any combination of below filters can be passed in request as per need.
              * `userId`
              * `userName`
              * `firstName`
              * `lastName`
              * `middleName`
              * `displayName`
              * `emailAddress`
              * `mobileNumber`
              * `mobileNumber2`
              * `rank`
              * `country`
              * `timeZone`
              * `impersonated`
              * `assignedGroup`
              * `roleId`
              * `type`
              * `status`
              * `roleName`
              * `billable`
              * `teamId`
              * `externalIdentity`
              * `viewId`
        fields:
          type: array
          uniqueItems : true
          items:
            type: string
            description: >
              Fields: Any combination of below fields can be passed in request to get the desired user data.
                * `userId`
                * `userName`
                * `firstName`
                * `lastName`
                * `middleName`
                * `displayName`
                * `emailAddress`
                * `mobileNumber`
                * `mobileNumber2`
                * `rank`
                * `country`
                * `timeZone`
                * `impersonated`
                * `assignedGroup`
                * `roleId`
                * `type`
                * `status`
                * `roleName`
                * `billable`
                * `teamId`
                * `externalIdentity`
                * `viewId`
                * `objectType`
                * `primaryRole`
          default: [ "userId","userName","firstName","lastName","emailAddress"]
        operations:
          type: object
          additionalProperties:
            type: string
            enum:
              - LIKE
              - BETWEEN
              - NOT
            description: >
              operations:
                * `LIKE` - to filter data based on any string in any field e.g teamId
                * `BETWEEN` - to filter data based on values mentioned in BETWEEN two values
                * `NOT` - to filter data based on value not present
        skip:
          type: integer
          format: int32
          example: 2
          description: "This field indicates the number of records to be skipped."
          default: 0
        top:
          type: integer
          format: int32
          example: 20
          description: "This field indicates the number of top records to be returned."
          default: 50
        orderBy:
          type: object
          additionalProperties:
            type: string
            enum:
              - ASC
              - DESC
            description: >
              Sort orderBy:
                * `asc` - Ascending, from A to Z
                * `desc` - Descending, from Z to A
    CustomAttribute :
      type : object
      properties :
        id :
          type : string
        values :
          type : array
          items :
            $ref : '#/components/schemas/AttributeValue'
    AttributeValue :
      type : object
      properties :
        value :
          type : string
          example: "true"
        resolvedValue :
          type : object
          example: null
    AcdUserMapping:
      type: object
      properties:
        loginId:
          type: string
    AcdInfo:
      type: object
      properties:
        loginId:
          type: string
          example: "testuser6454@do31.com"
    UserResponseV2:
      type: object
      properties:
          UserV2:
            type: object
          values:
            type: object
            items:
              $ref: '#/components/schemas/UserV2'
    UserV2:
      type: object
      properties:
          id:
            type: string
            example: "true"
          userName:
            type: string
            example: "true"
          firstName:
            type: string
            example: "true"
          lastName:
            type: string
            example: "true"
          middleName:
            type: string
            example: "true"
          displayName:
            type: string
            example: "true"
          emailAddress:
            type: string
            example: "true"
          customAttributes:
            type: array
            example: "true"
          mobileNumber:
            type: string
            example: "true"
          mobileNumber2:
            type: string
            example: "true"
          assignedGroup:
            type: string
            example: "true"
          rank:
            type: number
            example: 1
          country:
            type: string
            example: "true"
          timeZone:
            type: string
            example: "true"
          role:
            type: string
            example: "true"
          type:
            type: string
            example: "true"
          hireDate:
            type: string
            example: "true"
          acdInfos:
            type: array
            example: "true"
          groupIds:
            type: array
            example: "true"
          billable:
            type: string
            example: "true"
          externalIdentity:
            type: string
            example: "true"
          emailToBeVerified:
            type: string
            example: "true"
          secondaryRoleIds:
            type: array
            example: "true"
          views:
            type: object
            example: "true"
          teamId:
            type: string
            example: "true"
